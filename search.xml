<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[v2ray搭梯子简易教程]]></title>
    <url>%2Fposts%2F2731281632%2F</url>
    <content type="text"><![CDATA[未完 选购VPS商家与套餐检验服务器可用性部署服务器端 登陆VPS。个人倾向于使用 win10 自带的OpenSSH，也就无需下软件，在 可选功能 设置项内添加。打开 powershell 运行以下指令进行登陆： 1ssh root@ip 运行后会提示输入密码，在管理面板复制密码后，右键即会自动粘贴。值得注意的是，无论是粘贴还是手动输入，由于安全方面的需求，默认设置下 poweshell 中的密码均不会显示明文，也不会显示星号。 登陆成功后，安装 curl 环境： 1apt-get update -y &amp;&amp; apt-get install curl -y 运行 v2ray.233 一键安装脚本，安装完成后按照脚本提示操作即可，默认设置不懂的无需去改动： 1bash &lt;(curl -s -L https://git.io/v2ray.sh) 运行 v2ray url 得到梯子的配置链接，复制以备客户端使用。 部署客户端Win V2rayNAndroid V2rayNGiOS shadowrocketMac V2rayU ClashX]]></content>
      <tags>
        <tag>v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo + Github Pages 搭建个人博客（美化篇）]]></title>
    <url>%2Fposts%2F3871206004%2F</url>
    <content type="text"><![CDATA[能使网站变漂亮的 N 种方法，谁会不心动呢？ 修改链接文本为蓝色 默认的链接文本样式仅仅添加了下划线，不够醒目，在此通过添加 CSS 样式将其样式修改为蓝色 + 下划线 打开 \theme\next\source\css\_common\components\post\post.styl 文件，添加如下代码： 12345678910.post-body p a&#123; color: #64CEAA; //原始链接颜色 border-bottom: none; border-bottom: 1px solid #64CEAA; //底部分割线颜色 &amp;:hover &#123; color: #fc6423; //鼠标经过颜色 border-bottom: none; border-bottom: 1px solid #fc6423; //底部分割线颜色 &#125; &#125; 效果展示：这是一个通往百度的链接 主题色彩大一统 你喜欢主题默认的黑白色吗？喜欢纯白色的网页背景吗？喜欢安卓浏览器搜索框白色与博客顶栏黑色的强对比吗？…. 你或许喜欢，或许不，但你随时都可以任性地更改它们。 保持打开 \themes\next\source\css\_custom\custom.styl 文件，添加以下代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546// 网站背景色，建议选择浅色值以便突出展示博客内容 body &#123; background-color:#E0F9F7 ; background-repeat: no-repeat; background-attachment:fixed; background-position:50% 50%; &#125; // //博客名所在方块样式，不建议修改颜色以外的属性，除非你做好修改了一连串文件的准备 .site-meta &#123; background: #00CCCC; &#125; // 修改按键（button）样式 .btn &#123; color: #00CCCC; background: #fff; border: 2px solid #00CCCC; &#125; // 按键（button）点击时的样式 .btn:hover &#123; border-color: #00CCCC; color: #fff; background: #00CCCC; &#125; // 鼠标移动至文章标题时的效果 .posts-expand .post-title-link::before &#123; content: ""; position: absolute; width: 100%; height: 2px; bottom: 0; left: 0; background-color: #00CCCC; visibility: hidden; -webkit-transform: scaleX(0); -moz-transform: scaleX(0); -ms-transform: scaleX(0); -o-transform: scaleX(0); transform: scaleX(0); transition-duration: 0.2s; transition-timing-function: ease-in-out; transition-delay: 0s; &#125; 访问在线取色工具选取你喜欢的颜色的色值，替换上文代码中的色值即可。 删去顶栏黑线。打开 \themes\next\source\css\_common\components\header\headerband.styl 文件，修改黑线高度为 height: 0px即可。 为什么要删去？浏览器打开之后有4部分颜色，从上到下为：浏览器顶栏颜色、headerband 颜色、site.meta 主题色（移动端）、网页背景色： 网页背景色与主题色往往不一样，常见状况是背景浅、主题深/亮，以突出内容； 移动端浏览器顶栏默认为白色或浏览器主题的颜色，也可通过修改站点配置文件中d android_chrome_color: &quot;#00cccc&quot; 和 safari_rainbow: true 来自定义安卓端顶栏色，或启用主题色进行苹果端着色； 于是，headerband 部分就很尴尬了，头上连着不设为主题色就会在不同设备上有不同表现的浏览器顶栏，下面紧挨着 site.meta，看文章时上滑一下又去连着网页背景。都设为主题色吧，PC 端又出现那么深/亮的线横在那里吸引眼球…. headerband 的目标应该是一条固定的顶栏菜单，例如 Bilibili，但 next 主题对它的设计还没有到能够让一般用户轻松使用的程度。 代码高亮、复制按钮 Markdown语法有两种方式标记大代码块，其一是用 tab，其二是用两个三连反引号（英文输入法下，键盘左上角的 ~键）包裹 ： 实践发现，只有三连反引号的方式才能实现高亮效果，且必须在第一个三连反引号后面标记上代码的语言名，如上。 容易被忽略的高亮语言名：markdown css html yml bash 此外，请确保站点配置文件中的如下参数是开启状态： 12345highlight: enable: true line_number: true auto_detect: true tab_replace: 行内代码块的高亮使用单反引号包裹，其样式可以通过在 \themes\next\source\css\_custom\custom.styl 文件内添加以下代码来自定义： 12345code &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125; 启用主题配置文件中的一下参数来启用代码块的复制按钮： 1234copy_button: enable: true # Show text copy result show_result: true 效果见本站（说实话不咋滴，聊胜于无） “全文结束”标识符 善用标签的话，该标识符能够有效提升标签的注意吸引作用，减少读者的目光游离带来的疲劳感。 在路径 \themes\next\layout_macro 中新建 passage-end-tag.swig 文件，添加以下代码： 123456&lt;div&gt;&#123;% if not is_index %&#125; &lt;div style="text-align:center;color:#A5A2A0;font-size:14px;"&gt; ———— 全文结束，感谢阅读 ———— &lt;/div&gt;&#123;% endif %&#125;&lt;/div&gt; 打开 \themes\next\layout_macro\post.swig 文件，在如下 END POST BODY 后的位置添加以下代码： 123456789&#123;#####################&#125;&#123;### END POST BODY ###&#125;&#123;#####################&#125;&lt;div&gt;&#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125;&#123;% endif %&#125;&lt;/div&gt; 效果见本文。 隐藏页尾版本主题 修改主题配置文件对应参数即可： 1234567891011powered: # Hexo link (Powered by Hexo). enable: false # Version info of Hexo after Hexo link (vX.X.X). version: falsetheme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). version: false 修改主题文字内容 进入 \themes\next\languages\zh-CN.yml 文件，随心所欲进行文字替换即可，建议修改： 12归档 → 时间轴日志 → 文章 配合上一条使用可以得到个性化的页尾文字展示。 特效：点击出现桃心 在 \themes\next \ source \ js \ src 目录下创建文件 clicklove.js，添加以下代码： 1!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 在 \theme\next\layout\_layout.swig 文件内添加以下代码： 12&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/clicklove.js"&gt;&lt;/script&gt; 效果见本站。 添加看板娘 安装插件： 1cnpm install --save hexo-helper-live2d 在站点配置文件内添加以下代码： 12345678910111213141516171819# live2dlive2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-shizuku # 指定模型 display: #设置位置和宽高 position: right width: 165 height: 330 mobile: show: true # 是否在移动端显示 react: opacity: 0.7 # 不透明度 在模型目录中选中一个(只有名字鬼选得出来啊！不知道开发者怎么想的，只有17年遗留博客的部分模型预览)，运行指令 npm install {packagename} 下载模型。 模型下载后，把名字填入上面的 use: 即可。 添加豆瓣电影/音乐/游戏页面 在 /blog 目录安装插件： 1$ cnpm install hexo-douban --save 在站点配置文件中添加代码： 1234567891011121314# 豆瓣插件douban: user: # 个人豆瓣ID builtin: false book: title: 'This is my book title' quote: 'This is my book quote' movie: title: 'This is my movie title' quote: 'This is my movie quote' game: title: 'This is my game title' quote: 'This is my game quote' timeout: 10000 user: 填写豆瓣个人 IDtitle&amp;quote: 生成页面后自己对照着修改 在主题配置文件中新增书影游菜单： 12345678menu: home: / || home tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || tasks books: /books/ || book movies: /movies/ || video-camera games: /games/ || gamepad 在语言文件 \themes\next\languages\zh-CN.yml 中添加翻译： 12345678menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 movies: 电影 books: 读书 games: 游戏 在根目录运行命令生成页面： 1234hexo douban #生成书、影、游，三个页面，耗时较长hexo douban -m # 仅生成电影页面hexo douban -b # 仅书籍hexo douban -g #仅游戏 据说今后将不能使用 hexo d 来推送了，因为与这里的 douban 缩写存在歧义，需要写成 hexo deploy。 使用炫酷标签云 效果预览：mikecoder.github.io 进入到 hexo 的根目录，然后在 package.json 中添加： 1"hexo-tag-cloud": "2.1.*" 在根目录执行 npm install 命令，安装该模块。 next 主题用户修改 \theme\next\layout\_macro\sidebar.swig 文件，添加以下代码（其他主题请见Githup 项目主页)： 123456789101112&#123;% if site.tags.length &gt; 1 %&#125;&lt;script type="text/javascript" charset="utf-8" src="&#123;&#123; url_for('/js/tagcloud.js') &#125;&#125;"&gt;&lt;/script&gt;&lt;script type="text/javascript" charset="utf-8" src="&#123;&#123; url_for('/js/tagcanvas.js') &#125;&#125;"&gt;&lt;/script&gt;&lt;div class="widget-wrap"&gt; &lt;h3 class="widget-title"&gt;Tag Cloud&lt;/h3&gt; &lt;div id="myCanvasContainer" class="widget tagcloud"&gt; &lt;canvas width="250" height="250" id="resCanvas" style="width=100%"&gt; &#123;&#123; list_tags() &#125;&#125; &lt;/canvas&gt; &lt;/div&gt;&lt;/div&gt;&#123;% endif %&#125; 通过 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s来进行本地预览，三个指令都需要，且最好不要使用 hexo g -d这类组合命令做法。]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo + Github Pages 搭建个人博客（基础篇）]]></title>
    <url>%2Fposts%2F1678241867%2F</url>
    <content type="text"><![CDATA[使用免费资源搭建个人博客网站，并发表一篇文章，这样的事你也能够做到。 环境安装 运行环境：node.js —— 官网下载 版本控制工具：Git —— Github镜像下载 静态网页生成器：Hexo —— 在任意命令行(Cmd、PowerShell 或 Git Bash)中输入： 1$ cnpm install -g hexo-cli cnpm 是从淘宝镜像源进行包管理的指令，用以替代速度极慢的官方的 npm。后续需要运行的一切 npm 指令都可以替换为 cnpm。如果没有，可以运行以下命令安装： 1$ npm install -g cnpm --registry=https://registry.npm.taobao.org 配置 Github启用 Github Pages 登陆 Github 选择右上角的 new repository 新建一个储存库。 注意：repository name 的格式必须为 username.github.io，这也就是你博客的网址。其中 username 为你的 Github 用户名，填写错误将不能通过 Git 推送更新博客。 打开刚刚创建的储存库，进入 setting ，往下拉找到 Github Pages 一项，确保其已经开启，或在随便选择一个 theme 后能够开启，此时你应当已经可以访问 username.github.io。 对于复杂或陌生网页上文本信息的寻找和定位，如 “setting”，请善用浏览器的查找功能 Ctrl+F，在文档中也是如此。 关联 Git 与 Github 在任意位置右键，选择 Git Bush Here，依次输入如下命令： 123$ git config --global user.name "你的GitHub用户名"$ git config --global user.email "你的GitHub注册邮箱"$ ssh-keygen -t rsa -C "你的GitHub注册邮箱" 第三行命令要求输入密码，该密码用于每次 Git 推送更新时的身份验证，无需密码，直接回车到底即可。 打开电脑的 .ssh 文件夹 ( C:\Users\username\.ssh )，将id_rsa.pub 密钥文件的内容全部复制。 打开 github.com/settings/keys 页面，点击 New SSH Key。Title 随便填，将刚才复制的内容粘贴到 Key 一栏，Add，搞定。如此一来今后的 Git 推送将使用SSH的身份验证方式，更安全，也更省心。 初尝 Hexo 在合适位置创建 blog 文件夹，今后博客相关的所有的文件都放这个文件夹。 启用 Hexo。在 blog 文件夹内右键打开 Git Bash (后面将省略类似说明)，输入： 1$ hexo init # 在当前目录创建 hexo 的实例 命令执行的结果一般总有反馈，执行成功或是失败、失败的原因或建议的处理方式，请善用这些信息。 学习的顺序：主动理解与思考 &gt;&gt; 百度一下 &gt;&gt; 询问他人。 检查 Hexo。输入： 12$ hexo g # 生成静态网页$ hexo s # 用本地服务器进行网页预览，在浏览器输入 localhost:4000 查看 常用的Hexo指令。 1234567$ hexo help #查看所有 hexo 指令和功能$ hexo g #根据当前配置文件生成网页，所有内容存入 blog/public 目录$ hexo s #使可通过 localhost:4000 访问 public 文件夹中的内容，即本地预览已生成的网页$ hexo d #推送 public 内的网页到云端服务器$ hexo g -d #依据当前配置，生成网页并推送$ hexo new "art_name" #新建名为 "art_name" 的新文章$ hexo clean #清除缓存，也清空 public 文件夹内容 新建的文章为 .md 格式(Markdown)，存放于 blog/source/_posts/ 。 通过 hexo new 命令新建的 .md 文件自带了一个 Front-matter 参数段，如下所示： 12345 --- title: Hexo + Github Pages 搭建个人博客（基础篇） date: 2019-05-21 22:12:19 tags: blog--- Hexo 通过读取该参数段来获得文章的时间、标题、标签等信息。你也可以在其他位置新建 .md 文件，编辑好内容后放入 _posts 文件夹，只是别忘了手动添加这些参数段。 定制站点信息 打开 blog/_config.yml 文件，对进行博客个人信息的修改，使之正式成为你自己的博客： 12345678# Sitetitle: #博客标题subtitle: #个人简介description: #网站描述keywords: #关键词，用于搜索引擎收录author: #作者名language: zh-CN #设定语言为中文timezone: #时区，无需值 站点配置文件（blog/_config.yml）的内容包括站点信息、功能开关、主题和插件配置等等。详情参见 Hexo 官方中文文档。 关联 Hexo 与 Github 储存库。将 blog/_config.yml 文档拉到最下面，将最后一段修改为如下所示。 1234deploy: type: git repo: https://github.com/username/username.github.io.git branch: master 别忘了替换 username；每个冒号后面必须有一个英文空格 今后还会频繁、大量的编辑这种配置文件，一款开启代码高亮的编辑器将能够帮助你节省很多精力和时间。推荐微软的开源编辑器 VS Code ，它免费、轻量、响应快、插件丰富（我甚至用它来写Markdown） 发表一篇文章 通过 hexo new 命令新建一篇文章，随便命个名比如《春江花月夜》。 进入 blog/_posts/ 文件夹找到它，在里面随便粘贴上点内容，比如： 123456789作者：张若虚&lt;!--more--&gt; # 分隔符，以上内容作为摘要出现在博客首页春江潮水连海平，海上明月共潮生。 滟滟随波千万里，何处春江无月明！ 江流宛转绕芳甸，月照花林皆似霰； 空里流霜不觉飞，汀上白沙看不见。 江天一色无纤尘，皎皎空中孤月轮。 江畔何人初见月？江月何年初照人？ 人生代代无穷已，江月年年望相似。 保存后在 blog 目录下打开命令行，输入 hexo g - d推送更新。稍等一会后打开自己的博客网址 username.github.io，体会一会儿张若虚的感情吧hh。 如果你想修改文章，只需进入该文章对应的 .md 文件进行修改保存，再次 hexo g -d 即可。 至此你已完成本教程目标，恭喜。 未来？ 现在你已经学会如何把自己的文章发表在个人博客上，尽管它还不太漂亮，但我们之后可以做更多的事来让它变得更好。这些事情包括： 使用第三方主题。Hexo 会根据主题来生成静态页面，访问 Hexo 主题商店 挑选一款合适的博客主题，进入其 Github 页面获取下载命令，在 blog/ 目录下执行安装。本博客所用主题为 next。 定制主题内容。主题是影响博客外观最多的角色，阅读你的主题的官方文档，配合参考网络上各种各样的教程去修改主题配置文件、样式表文件，你几乎可以实现任何事。 优化文章排版。毕竟文章才是博客的核心，熟练使用 Markdown 语法吧，它真的有够简洁，多涉猎一些优秀的排版作品，学习并借鉴其好的用法。 例如：代码块的标记，使用反引号的麻烦要远少于使用缩进，尽管看起来它需要多敲几下键盘，缩进的坑真是谁用谁知道。]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
